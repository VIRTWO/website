<h3 id="post-title">Conditions</h3>

<i id="post-date">2011-12-06 00:00</i>

<p id="post-group">Computers</p>

<p id="post-category">Programming</p>

<div id="post-body" >

	<script src="https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js"></script>

	<p>Being a physics major, many times I came across moments when I had to decide I have to give my time to physics or should pace up in computers the area of my interest and every time I had my dad beside me to help me in taking decisions. The same is true when you are programming, you have to decide upon which operations, data, calculations etc. are of your interest and which are not. And, in life sometimes you have to decide in future, that if this will happen I'll do this or if that happens I'll do that. Similarly, in programming sometimes you have to decide beforehand that what will you do in a particular case. In life I had my dad and you may have friends, family members and a number of people you count on, the same way in see programming you have condition statements to help you out and that's what we are going to discuss in here.</p>

	<p>Well, C provides you with 4 basic types of condition statements, which prove more than enough for the job and the list is given below. Remember C programming is lot simpler than real life.</p>
	
	<ul>
		<li><code>if</code> statements family.</li>
		<li><code>switch</code> statements family.</li>
		<li><code>goto</code> statements family.</li>
		<li><code>?</code> statements family.</li>
	</ul>
    
	<p>The most common among these are the first and last type but we often land up in situations where we have to use the second and third types. So, beginning with the if statements family we take a step towards learning one of the most important facilities provided by C.</p>
	
	<p><b><code>if</code> STATEMENT FAMILY</b></p>
	
	<p>If today was Tuesday then I would be on a ship and if today was Thursday then I would have been flying to Paris. These kinds of situations are handled by the first variants among the if statement family. Well, this was a very vague example but can be expanded to C very well. Anyways, I have found this statement to be the most used condition statement in C language. To understand this statement let's see the general structure of an if statement which is given below.</p>
	
	<pre class="prettyprint lang-c" data-external-text="code/conditions-1.c" />
	
	<p>Well, an if statement has a condition given inside <code>()</code>, that it checks and if the condition is true then the statements written inside the <code>{}</code> following it are executed and vice-versa. Some of the basic points to note about the structure of the <code>if</code> statement are as follows:</p>

    <ul>
		<li>No <code>;</code> follows the if statement, else none of the statements given inside the <code>{}</code> will be executed.</li>
		<li>If <code>{}</code> doesn't follows the <code>()</code> of the condition given in the if statement then only the very next statement given after the if statement will be executed.</li>
	</ul>	

	<p>Well, if you are not able to grasp any of the ideas, all your doubts will be clear after you see the example below. It checks if a number is even or odd and depending upon the case prints that the "NUMBER IS ODD" or "NUMBER IS EVEN". Do read the comments very carefully as they are the explanations.</p>
	
	<pre class="prettyprint lang-c" data-external-text="code/odd-even.c" />
	
	<p>Well, one thing that is left in the description of <code>if</code> statement that must have bugged your mind is what was <code>==</code> in the condition. Well, as a easy guess it's the operator that checks if left hand side is equal to right hand side in the expression. Now, what is an expression? Now I am bugged, everything's giving rise to a new question, but that's good. Well in the condition <code>( (number%2) == 0 )</code> the line <code>(number%2) == 0</code> is an expression with <code>==</code> forming the operator, <code>(number%2)</code> forming the left hand side and <code>0</code> forming the right hand side. Now, I believe you are clear. Now I know though you would have guessed, you will ask what is <code>!="</code> so I decided to provide you with all similar operators in advance and below table lists them.</p>

	<p>
		<table class="w3-table w3-striped">
		  <thead>
		    <tr class="w3-green">
			  <th>Operator</th>
			  <th>Description</th>
			  <th>Example</th>
			  <th>Evaluation</th>
			</tr>
		  </thead>
		  <tbody>
			<tr>
			  <td>==</td>
			  <td>Equal</td>
			  <td>10 == 7</td>
			  <td>False</td>
			</tr>
			<tr>
			  <td>!-</td>
			  <td>Not equal</td>
			  <td>10 !- 7</td>
			  <td>True</td>
			</tr>
			<tr>
			  <td>&gt;</td>
			  <td>Greater than</td>
			  <td>10 &gt; 7</td>
			  <td>True</td>
			</tr>
			<tr>
			  <td>&lt;</td>
			  <td>Less than</td>
			  <td>10 &lt; 7</td>
			  <td>False</td>
			</tr>
			<tr>
			  <td>&lt;=</td>
			  <td>Less than or equal</td>
			  <td>10 &lt;= 7</td>
			  <td>False</td>
			</tr>
			<tr>
			  <td>&gt;=</td>
			  <td>Greater than or equal</td>
			  <td>10 &gt;= 7</td>
			  <td>True</td>
			</tr>
		  </tbody>
		</table>
		
		<i>* True = 1, and False = 0. So, if you do not provide any condition operator and only an expression then the result of the expression will determine the condition. So, if the expression evaluates to 0 then it's taken as FALSE else it is taken as TRUE. With most of the compilers non-zero result of an expression is treated as TRUE. Other than these when you will read about pointers you will see that there is a special value called NULL that also evaluates to FALSE.</i>
		
	</p>

	<p>That's it! More than enough on if, you must have got bored by now. So we move on to the next one and I know just seeing the example below which does the same work as the last example you will understand it. Ok! I am talking about <code>if-else</code>, which is presented below.</p>	
	
	<pre class="prettyprint lang-c" data-external-text="code/odd-even-2.c" />
	
	<p>I don't feel I should say anything about <code>if-else</code> condition statement, it must be clear. Moving on, the last member of <code>if</code> statement family is <code>if-else if-else</code>. It comes to rescue when you have to perform a number of sequential checks with <code>if</code> and you wish to provide a default check if none of the <code>if</code> are satisfied. It is as simple as the other two discussed above, just read the example given below carefully and you are done.</p>
	
	<pre class="prettyprint lang-c" data-external-text="code/math-mark.c" />
	
	<p>Again, I pretty sure you understood the example and <code>if-else if-else</code> is clear. As a last word, <code>if</code> itself can be used in a way that solves the purpose of all of the condition statements we saw so far (and we will see in future) but others are there to ease the job, make code more clearer, reduce redundant typing and finally to offer you cuisines to choose from because everyone has different taste and needs. So, depending upon your needs and taste use any of them in your programs. Now, without wasting any more time I'll move on to the next type of condition statement i.e. <code>switch</code> statement.</p>
	
	<p><b><code>switch</code> STATEMENT</b></p>
	
	<p>Fundamentally <code>switch</code> statement is nothing but <code>if-else if-else</code>. If you are having any doubts about <code>if-else if-else</code>, analyze the last example again before you proceed. Well, <code>switch</code> comes to help when you are having a number of <code>if-else if-else</code> statements in your program and you are checking the condition on some particular variable only. Let's see a scenario of such use of <code>if-else if-else</code>.</p>
	
	<pre class="prettyprint lang-c" data-external-text="code/conditions-2.c" />
	
	<p>Now, let's see a program which uses <code>switch</code> statement. I won't say it adds any big benefit over <code>if-else if-else</code> but it does improves the understandability of the code and the way code looks.</p>
	
	<pre class="prettyprint lang-c" data-external-text="code/switch.c" />
	
	<p>I know the code must have been very clear so let's see what happened here. The very first line must be clear and so should have been the declaration of the variable. Now, comes the <code>switch</code> statement which appears like <code>switch(menu)</code>, and it means it's going to take an input of variable <code>menu</code> or rather its value (if it was an expression). Now begins <code>{</code> which is followed by <code>case 1:</code> which means if the value of menu is equal to 1 then execute the statement in the block of <code>case 1</code>. Now, you can easily see that the condition statement that got formed here is <code>if(menu==1)</code>.</p>

	<p>And, so goes the explanation about other statements similar to <code>case 1</code> and then at the last appears <code>default:</code> which is there to handle any scenario that was not satisfied by any other case statements and its true for each and every case that escapes case (you can think of it as the <code>else</code> statement). In the program above you can see that a <code>break</code> appears in every case block, which though not a part of <code>switch</code> statement is very important. It is used to come out of the block of <code>switch</code> once a <code>case</code> is satisfied. If you don't provide the break statement, then all <code>case</code> statements afterwards will be executed as well. So, if there is any other <code>case</code> statement that satisfies the condition, it will be executed too.  On the same line, do remember that <code>default</code> is always true. So, if the break is not present then <code>default</code> will be executed as well. You can skip writing the <code>default</code> statement and its block but do it only if you are sure that you have handled all other cases.</p>

	<p>Well, now we have an overview of the <code>switch</code> statement, so I'll give you the prototype for <code>switch</code> statement and the we will be done with <code>switch</code>.</p>
	
	<pre class="prettyprint lang-c" data-external-text="code/switch-prototype.c" />
	
	<p>Note that in the statements block for <code>case</code> we have not used <code>{}</code> and have used it to rather enclose all the <code>case</code> statements together making them the part of <code>switch</code> statement. You can use <code>{}</code> to enclose the <code>case</code> statements block but we don't require it until and unless we have some special <code>case</code>.</p>

	<p>That's it! Enough about <code>switch</code> statement and now we will move on to next condition statement i.e. <code>goto</code>.</p>

	<p><b><code>goto</code> STATEMENT</b></p>
	
	<p>All the beginner level books that I studied to learn C programming always said it's a not a good practice to use the <code>goto</code> statement in your programs and most of them said because of the underlying difficulties and behaviors of <code>goto</code> statement (or readability issues that come with <code>goto</code>). Then when I started programming in C at advance level it started appearing in the programs more often and I found it made life simpler.</p> 

	<p>Well, all the condition statements, as the name suggests, work on basis of some condition but <code>goto</code> statement is an unconditional statement. It helps you to jump from one part of code to other unconditionally, as we will shortly see. We will have some theory here before we move to some program. Don't worry about terms which you are not able to understand, they all will be clear once I give you the example.</p>

	<p><code>goto</code> statement requires a label in order to recognize where you want to go or which part of the code we want to execute. This label can be anywhere in the program, after or before the <code>goto</code> statement. The only constraint being it should be in same function. I know I've not yet told anything about functions but remember this rule when you study functions.  Now, to begin with the practical part, let's start with the general structure of <code>goto</code> statement. Depending on the location of label, <code>goto</code> can take two structures. In the first variation label appears before <code>goto</code> statement and in the second variant <code>goto</code> appears before the label.</p>

	<p>In the program whenever <code>goto</code> is encountered the program jumps to the location specified by the label attached with <code>goto</code> and executes the statements there. The point to note is that a label is followed by a <code>:</code> and <code>goto</code> <code>LABEL</code> ends with <code>;</code>.</p>

	<p>Let's move to an example that will help clearing any confusions.</p>
	
	<pre class="prettyprint lang-c" data-external-text="code/goto-1.c" />
	
	<p>Every time I explain you the output just after the program but here I'll show you the output first. See the output the above program will and try to analyze how it happens before you proceed.</p>
	
	<pre class="prettyprint lang-c" data-external-text="code/goto-1-out.c" />
	
	<p>Now, let's see what happened here. When the program started and saw <code>LABEL1:</code> it didn't bother and proceeded, added <code>1</code> to <code>a</code> and printed it and then came the <code>if</code> and it was false so it reached <code>goto LABEL1;</code> and then <code>LABEL1</code> was searched in the program and the program jumped to the statement <code>LABEL1:</code> and started executing the statements that followed it. So, it increased <code>a</code> again and printed it and kept repeating till <code>a</code> became <code>16</code>. Once a became <code>16</code> the <code>if</code> became true and the <code>goto LABEL2;</code> got executed and hence <code>LABEL2"</code> was searched and program jumped there and executes, <code>printf("So that was Goto statements example\n");</code> followed by <code>return 0;</code> and then the program ended. Simple!</p>

	<p>The only point to note here is that any statement that follows a label becomes a part of block of statements for that label. The block ends only when another label is encountered. Moving on, let's look at <code>?</code> operator statement.</p>
	
	<p><b><code>?</code> STATEMENT</b></p>
	
	<p>This is one of the easiest statements in C and I don't have much story to tell with this so will jump directly to its syntax.</p>

	<p class="code-line">condition ? expression 1 : expression 2;</p>

	<p>In this statement the condition is evaluated first and then if the condition is true the statement returns the result of evaluation of first expression (<code>expression 1</code>) and if condition is false it returns the result of evaluation of second expression (<code>expression 2</code>). The only question that remains unanswered is, to whom it returns the result and that will be clear with the example below.</p>
	
	<pre class="prettyprint lang-c" data-external-text="code/conditions-3.c" />
	
	<p>Now you know <code>?</code> statement. let's see one more example program with more condition statements in mix.</p>
	
	<pre class="prettyprint lang-c" data-external-text="code/conditions-4.c" />
	
	<p>Output of above program is given below.</p>
	
	<pre class="prettyprint lang-c" data-external-text="code/conditions-4-out.c" />
	
	<p>I know this example wouldn't have been much clear so I'll explain it but before reading the explanation read the program at least 5 times. In this example I have demonstrated a case when <code>?</code> doesn't returns anything and works as an <code>if-else</code> statement and to confuse you I have added the <code>goto</code> also. Here instead of returning some value (or expression) we have a bunch of statements. Keep in mind that these statements are inside <code>{}</code> which makes it a block. Further the <code>()</code> around the block makes the block to be evaluated as an expression. So when we start the execution since the value of <code>i</code> is <code>0</code> initially the condition in <code>?</code> becomes false and the part <code>({printf("i is %d\n",i);i=i+1;goto LABEL1;})</code> (removed new line character to fit in a single line) gets executed. Now, in <code>()</code> there is a block of statements formed by <code>{}</code>. When this block is executed the value of <code>i</code> is printed and then incremented by one. Now the program execution goes to <code>LABEL1</code> and again the <code>?</code> gets executed and continues till <code>i</code> becomes equal to <code>5</code>. When <code>i</code> equals <code>5</code> the condition in <code>?</code> becomes true and <code>({printf("i has become 5\n");goto LABEL2;})</code> (again new line characters removed to fit in single line) gets executed and the program execution goes to <code>LABEL2</code> and ends.</p>

	<p>You may be wondering what is the result of the expression formed due to use of <code>()</code>. Well explanation of this is beyond the scope of this article but I will give you a brief idea. In the block of statements, the value of last expression or function call becomes the value of the expression. So, a statement like below will return <code>5</code> as its return value, as <code>printf</code> returns the number of character it prints.</p>

	<p><code>(1 == 1)?({ printf("ABCD\n");}):({printf("XYZ\n");});</code></p>

	<p>Now, this statement gives rise to more questions and we will try to answer them in brief. You can choose to ignore the text that follows in this paragraph. In above statement <code>printf</code> has a return value but if it did not return any value (read void return type) then it will throw error. Other question that may arise is why do we have <code>{}</code> even when we have a single statement. Well if you have a single statement you may choose to not write <code>()</code> and <code>{}</code> but be careful that you do not put a <code>;</code> at the end of statement. If you put a <code>;</code> at the end then it starts to be treated as a group of statements and then it needs to be in a block, and since it is a block it requires you to put <code>()</code> around it, to make it an expression. Well this will be more clear once you read about blocks and expressions.</p>

	<p>Now I hope the program is clear and if in case it is not, then read it again and this time it will be clear.</p>

	<p>So, I have shown you one more way of using <code>?</code> statement and the approach I showed you in the last program is very often used to write obfuscated codes i.e. codes which are tough to understand. So, use this approach only for fun and not in your daily programming. Intent of the program was to show you that there are a number of ways you can use <code>?</code>. Now, it's up to you to use your creativity to find more uses of <code>?</code>.</p>

	<p>Well, with this we have finished the condition statements but before leaving I'll provide you two more operators which will help you to write complex conditions. Have a small break and come back and read the last topic and then you conditions added to your arsenal.</p>

	<p><b>CONDITIONS USING <code>&&</code> and <code>||</code></b></p>

	<p><code>&&</code> is called "Logical AND" and <code>||</code> is called "Logical OR". They are used to combine conditions. I will just tell you the usage as that will be more than sufficient.</p>
	
	<ul>
		
		<li><code>(condition 1) && (condition 2) && (condition N)</code> means a condition that is true when all the conditions combined by help of <code>&&</code> are true. Even if one is false the whole condition will become false. In fact, if one condition becomes false rest are not even evaluated. The order of evaluation (left to right or right to left) is dependent on compiler. Evaluation starts from one end and proceeds towards the other till all are found to be true or one is found to be false.</li>
		
		<li><code>(condition 1) || (condition 2) || (condition N)</code> means a condition that is true when any of the conditions combined by help of <code>||</code> is true. This condition turns out false only when all the conditions that are combined are false. Based on order of evaluation, the moment one condition is found to be true, the evaluation stops or else continues till all the individual conditions are evaluated. Well there may be some dumb compiler available who evaluate all individual conditions before deciding the outcome of the whole condition but such compilers are very hard to find.</li>
		
	</ul>

	<p>Couple of points to note here are as follows.</p>
	
	<ul>
		
		<li><code>()</code> that is used with each condition is not necessary but it helps to prevent errors and increases the readability of your program.</li>
		
		<li><code>&&</code> takes precedence over <code>||</code> i.e. <code>&&</code> is evaluated before <code>||</code>. Example: In condition <code>(a == b && b == d || b == e)</code> even if <code>(b == d)</code> and <code>(b == e)</code>, it will not mean the overall condition is true. For the condition to be true either <code>(b == e)</code> should be true or <code>(a == b && b == d)</code> should be true.</li>
		
	</ul>
	
	<p>Finally the condition statements are over. Now, I'll also take rest before we start discussing about loop statements. Just a second, did you realize that you indirectly constructed a loop in the example of goto. Anyways we will see the formal loop statements in more details after sometime. Till then Happy Programming!</p>
	
</div>