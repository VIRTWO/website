<h3 id="post-title">Loops</h3>

<i id="post-date">2011-12-08 00:00</i>

<p id="post-group">Computers</p>

<p id="post-category">Programming</p>

<div id="post-body" >

    <script src="https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js"></script>

    <p>One day when I was in class, a daemon entered my mind and asked me to throw a paper airplane on my teacher and I did so, but the result was not fruitful, my teacher asked me to apologize and as a punishment asked me to write "I will not throw airplane again", 10000 times and to show it to her the very next day. I was learning to program in C so thought I'll write a program to do the job and will submit the prints. So, I wrote a program that is given below.</p>

    <pre class="prettyprint lang-c" data-external-text="code/loops-1.c" />
    
    <p>I tried being smart and I copied the first <code>printf</code> statement and pasted it 10000 times, compiled my program and executed it, saved the result in a file and took the print out but started to hate programming. It is really sickening to type or paste the same lines so many times. I am not going to become a programmer if they do such jobs.</p>

    <p>One of my good friends who had motivated me towards programming said, "You need loops now and after that you can throw as many as airplanes as you want". Then he gave me a program to ease my job, which I have shown below.</p>
    
    <pre class="prettyprint lang-c" data-external-text="code/loops-2.c" />
    
    <p>Now changing the number 10000 I can print the same thing as many times I want. It was so helpful that I learned about loops and after learning that I found it not only helps in mischief but also in doing a great deal of work. So that's what I am going to share here, the concept of loops in C. To begin with firstly I'll tell you about the kinds of loop that are available in C. C provides us with the following king of loops.</p>

    <ul>
        <li><code>while</code> loop</li>
        <li><code>do-while</code> loop</li>
        <li><code>for</code> loop</li>
    </ul>
    
    <p>We will begin with the basic structure of a loop which is given below.</p>

    <pre>
        Execute given statements until guard fails {
            statements;
        }
    </pre>

    <p>Well you must have got an idea about how a loop will look like in a program. I know the word guard may be boggling your mind and it will be clear in next few lines. There are few terms related with a loop which must be clear before we proceed further(including Guard) and I have listed them with their meanings next.</p>

    <ul>
        <li><b>Loop Statement:</b> Loop statements are the repeated statements (block of statements) that get executed in a loop.</li>
        <li><b>Iteration:</b> Each execution of the block of statements given in the loop.</li>
        <li><b>Guard:</b> Condition, which when true, loop execution takes place. If guard is false then loop exits or no more iteration occurs.</li>
        <li><b>Loop invariant:</b> A statement, a condition that is true before the execution of loop and remains same even after the execution. It is hence used to check the correctness of the loop.</li>
    </ul>
    
    <p>So, loaded with the basics of loops let's go to our first loop i.e. <code>while</code> loop.</p>

    <p><b><code>while</code> LOOP</b></p>
    
    <p>To start with let's have a look at the basic structure of the while loop, which is given below.</p>

    <pre>
        while(condition) {
            statements;
        }
    </pre>

    <p>Now, let me show you a program that prints the line "HAPPY PROGRAMMING" 10 times using while loop. Read the comments carefully they are the explanations for the while loop.</p>
    
    <pre class="prettyprint lang-c" data-external-text="code/loops-3.c" />
    
    <p>Before going further here's a list of points you must always remember.</p>
    <ul>
        <li>Block of the statement is specified inside <code>{}</code> which starts just after the loop statement i.e. <code>while (condition)</code> here.</li>
        <li><code>;</code> is not appended after the loop statement and if done so the block of statement will not come inside the loop and the loop will end just after the loop statement.</li>
        <li>If the guard never fails or is always true, the loop will get stuck in infinite run of iterations and is called infinite loop.</li>
        <li>If you will not use <code>{}</code> after the loop statement then only the very next statement will be considered to be as part of the loop's statement block.</li>
    </ul>

    <p>The flow chart given next shows how the execution of the while loop happens.</p>
    
    <img alt="Flowchart of while loop" src="img/Loop1.png">
    
    <p>I know you are clear with <code>while</code> loop now, since it's very easy and if I am wrong in my judgment then read the example again and you will be able to understand it.</p>
    
    <p><b><code>do-while</code> LOOP</b></p>
    
    <p>Starting again with the basic structure of this loop which is given below we will see the difference between this loop and the <code>while</code> loop.</p>
    
    <pre>
        do {
            statements;
        } while(condition)
    </pre>
    
    <p>It's very similar to the <code>while</code> loop but here before checking if the guard was true, one iteration is always carried out. Once the first iteration is over, the guard is checked and if it's true, iteration continues and if it is false then the iteration ends. On the other hand, in case of <code>while</code> loop, we first check the gaurd condition and if the condition is true then the iteration is carried out. So, in case of <code>do-while</code> loop the iteration occurs at least once which is not true with <code>while</code> loop.</p>

    <p>I have saved my energy by not writing a example program of this loop since it's very similar to the <code>while</code> loop. Just keep one thing in mind i.e. use this loop when you want your code block to be executed at least once. The flow chart given next shows how the execution of the <code>do-while</code> loop happens.</p>
    
    <img alt="Flowchart of while loop" src="img/Loop2.png">
    
    <p>I hope you have understood the difference between <code>while</code> and <code>do-while</code> loops and if needed can use <code>do-while</code> loops. The next loop is the most important and most frequently used loop which can serve the purpose of a while as well as a do-while loop. Now, don't ask me, then why did I tell you about other loops instead of directly telling about this one.</p>
    
    <p><b><code>for</code> LOOP</b></p>
    
    <p>Let's see how this loop looks like.</p>

    <pre>
        for(statements to be executed before loop; 
            condition; 
            statement to be executed after a iteration) {
            
            statements to be executed in loop;
        }
    </pre>

    <p>Well, as you might have observed with your keen observing power that in the example I gave you while discussing <code>while</code> loop the first step was initializing a variable which I used in the guard and then in the block of statements I added a statement to increment the value of that variable so that the guard fails after certain number of steps. This forms the structure of any loop which we use generally and the <code>for</code> loop combines these 3 steps into one which eases our job of writing the loop.</p>

    <p>Here you can note that I have only changed the loop statement. The thing that you should always remember about <code>for</code> loop is its syntax i.e. <code>for( ; ; )</code>. Always remember the two <code>;</code> in the <code>for</code> loop. Since, <code>while</code> has only the condition or guard checking part in the statement we have used that part in <code>for</code> loop to mimic similar behavior. Always remember and never forget to add the two <code>;</code> in the statement, all of them are a must.</p>

    <p>Let's ass a statement to be executed before the loop. I will add the variable initialization here that we did separately in <code>while</code> loop.</p>

	<pre>
        for(i=0; i<10;) {
            // statements;
            i=i+1;
        }
    </pre>
	
	<p>In the part I did initialization, you can actually place any valid statement whether it's related to <code>for</code> loop or not and there can be virtually any number of statements there but they should be separated by <code>,</code> and not <code>;</code>. Separation of statements by use of comma has a different meaning than the block of statements and it is out of scope for this article.</p>

	<p>Next we try to add a statement to be executed at end of a iteration. We integrate the increment statement used in the <code>while</code> loop in the <code>for</code> loop.</p>

	<pre>
        for(i=0; i<10; i=i+1) {
            // statements;
        }
    </pre>

	<p>Compare it with the <code>while</code> loop and you will see the benefits. Anyway, it is up to you to decide which loop you want to use.</p>

	<p>Well that's all about loops, but loops will be incomplete if we do not discuss two more statements here. These two statements are <code>break</code> and <code>continue</code> and they 	provide more control over execution of the loops. Also, we must mention something on pre-increment/decrement and pre-increment/decrement before calling it a day.</p>

	<p><b><code>break</code> STATEMENT</b></p>
	
	<p>This statement allows you to come out of the loop even when the guard is true. Like always, I'll give you an example to illustrate it. Go through the program given below. The program is also another example of <code>for</code> loop and will help understanding it as well.</p>
	
	<pre class="prettyprint lang-c" data-external-text="code/loops-4.c" />
	
	<p>This program prints <code>Hi! How are you?</code> seven times. Initially the value of guard is true and <code>a</code> & <code>b</code> are zero. So the loop block executes and prints the line. Then it reaches the condition statement and checks if sum of <code>a</code> and <code>b</code> is  greater than <code>10</code>, and as it is not, <code>if</code> statements block is not executed. Now, the value of <code>a</code> & <code>b</code> are incremented by one and the guard is checked again and the same thing that I just mentioned happens repeatedly. When <code>a</code> equals <code>6</code> and <code>b</code> equals <code>6</code> then <code>if</code> condition becomes true and the <code>break</code> statement executes. When <code>break</code> statement executes, the <code>for</code> loop is exited. Note that the <code>break</code> statement is executed inside the loop and nothing in the code block of the loop after <code>break</code> statement gets executed after <code>break</code>. Due to this when the loop exits the value of <code>a</code> & <code>b</code> are <code>6</code> i.e. even the last part of the loop statement doesn't get executed. (the reason is it's assumed to be at the last statement of code block. In case of <code>while</code> and <code>do-while</code>, you can write it in the beginning also, but then the behavior of <code>break</code> will change accordingly).</p>

	<p>Lastly, remember that <code>break</code> acts on the loop containing it so in a situation like given below, <code>break</code> acts only on the inner loop.</p>
	
	<pre class="prettyprint lang-c" data-external-text="code/loops-5.c" />
	
	<p>In the above code snippet, <code>break</code> will end the inner loop but outer loop will keep on executing giving rise to a infinite loop.</p>
	
	<p><b>PRE/POST - INCREMENT/DECREMENT</b></p>
	
	<p>You saw something like <code>a++</code> in the previous example, what does it means? Simple, it's a way to write <code>a=a+1</code> that's it. It is called post-increment. Well, now what's pre-increment? Simple <code>++a</code>. Got confused? See the program below.</p>
	
	<pre class="prettyprint lang-c" data-external-text="code/loops-6.c" />
	
	<p>The output of the program is provided below</p>
	
	<pre>
        0 1
        1 2
        2 3
        3 4
        4 5
        5 6
        6 7
        7 8
        8 9
        9 10
        THIS IS NOT IN FOR LOOP BLOCK
	</pre>
	
	<p>So what happened here? When you say <code>i++</code> then firstly <code>i</code> is printed and then incremented but when you say <code>++j</code> then first <code>j</code> is incremented and then it is printed. Got the difference? That's why they are known as post and pre increments. In the same way you can have decrements too, which would look like <code>i--</code> and <code>--j</code>. This example also demonstrates the case when <code>{}</code> doesn't follows loop statement, that's why the statement in the second <code>printf</code> gets printed only once i.e. only the first <code>printf</code> was considered part of <code>for></code> loop block.</p>

	<p>To understand it in better way you can assume that when we say <code>i++</code> we actually mean the following,</p>

	<ul>
		<li>Use the current value of <code>i</code> in the current statement.</li>
		<li>After the above current statement increment <code>i</code> by <code>1</code>.</li>
	</ul>

	<p>Similarly, when we say <code>++i</code> we actually mean the following,</p>

	<ul>
		<li>Increment the current value of <code>i</code> by <code>1</code>.</li>
		<li>Use the incremented value of <code>i</code> in the current statement.</li>
	</ul>

	<p>On the same line you can work out what pre/post decrement will mean. Anyway, these are operators as such but have been included with loops as programmers use them too often in their programs along with loops.</p>

	<p><b><code>continue</code> STATEMENT</b></p>

	<p>This is similar to <code>break</code> statement but instead of terminating the loop it causes the statements written after it to be skipped in the ongoing iteration and makes the loop to move to the next iteration. I have modified the example that I gave you for <code>break</code> statement by removing the comments and replacing the <code>break</code> statement with <code>continue</code> statement. The modified program is given below.</p>
	
	<pre class="prettyprint lang-c" data-external-text="code/loops-7.c" />
	
	<p>Let's see how the output differs from the example which had <code>break</code>. Everything goes fine for <code>a</code> and <code>b</code> equaling to <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code> and 5 but when <code>a</code> equals <code>6</code> and <code>b</code> equals <code>6</code> the <code>if</code> condition becomes true. So, at this point <code>continue</code> executes  and rest of the statements in the loops block are ignored. Unlike <code>break</code> here instead of exiting the loop, the value of <code>a</code> & <code>b</code> are incremented and the loop continues till <code>a</code> & <code>b</code> equals <code>10</code>. I hope <code>continue</code> statement as well as its difference with <code>break</code> statement is clear now.</p>

	<p>With this we come to the end of the discussion about loops in C. Use them repeatedly for repeated tasks.</p>
 	
</div>