<h3 id="post-title">Introduction to programming</h3>

<i id="post-date">2011-12-03 00:00</i>

<p id="post-group">Computers</p>

<p id="post-category">Programming</p>

<div id="post-body">

	<p>"Programming" word means to program. Easy! Then what does a program means? Program is defined as a set of instruction to accomplish any task. So, programming means the art of writing programs. Well, you can think of a program as a framework in which you keep your ideas broken into smaller steps in an arranged manner for performing certain task. In insight of computers you can think a program as a set of planned instructions given in a particular defined order to make computer accomplish the desired task. This art of creating instructions and steps to accomplish a job is called programming.</p>

	<p>The next question that comes is what are these instructions which grouped together in specific order perform any task? To understand this lets take an example, if you have to ask someone for a book, you would say, "Can I have your book please?" or something similar. In the same manner when you ask your computer to do something it's an instruction but, which language my computer will understand? The answer is 'programming language'. As you use English, French etc- computer uses C, C++, Java etc- Like any other language these language also have their own grammar and rules. In this book we will be concentrating on one of these languages called 'C'.</p>

	<p>We said above that a program has an organized and grouped set of instructions, so what does it means? Suppose, you have to make a phone call, can you call without dialing the number or dialing the number before picking up the receiver? No, so you have to do these actions in a particular sequence, without missing any of the steps. The sequence of actions or steps you perform to accomplish the task successfully is called as algorithm.</p>

	<p>Sticking with the case of making the phone call, suppose you don't have a phone itself can you make the phone call? No. These prerequisites to perform any task are called as resources and inputs. Well, suppose you dialed the wrong number then will your task be accomplished? No. There are certain outputs required for successful completion of a task. If the wrong number is dialed it's an error and it needs to be corrected and this process is called as debugging i.e. removing the bugs.</p>

	<p>Now, let's introduce ourselves to the other side of programming i.e. optimization. Optimization can be defined as performing a job with minimum number of resources and in minimum number of steps. Let's, take an example, suppose you have to go to the airport. Now you can directly go to the airport by taking a cab or instead you can walk for some time and then can take a bus and finally a cab and reach the airport. So, in both case you performed the same task but in the second case you took more steps and optimization is reducing these steps. But, reduction in steps is not always possible; imagine you did not get the cab, then? And sometimes reduction in steps can increase the time taken to perform the job. So, you have to decides what factor (e.g.:- time, steps, resources etc-) is to be optimized to what extent. We will deal with the concept of optimization in details in coming chapters.</p>

	<p>Let's suppose you have a task and it can be broken into different subparts that together will finish the task. These subtasks are called procedures in computer terminology. These procedures may have their own individual algorithms. Procedures are grouped together in proper sequence using some other algorithm into a main procedure which gives input to these procedures and in turn depends on the outputs of them. In 'C' we call these procedures as functions and the name given to the main procedure is 'main' itself. These procedures are sometimes grouped into subprograms which in turn are grouped to a program. The only difference is a function can't finish any task until and unless it is coupled with a main function whereas; subprograms can perform small parts of the task, alone.</p>

	<p align="center" class="code-line">Task = Group of sub-task</p>

	<p align="center" class="code-line">Program = Group of Group of functions</p>

	<p>Loaded, with the basic terminology of programming, we can move to classification of programming.</p>

	<p><b>CLASIFICATION OF PROGRAMMING</b></p>

	<p>Programming on a very broad scale can be into 2 categories,</p>
	<ul>
		<li>Application Programming</li>
		<li>System Programming</li>
	</ul>

	<p>Though the distinction is not very clear, you can visualize application programming as making programs to accomplish the front hand tasks i.e. tasks asked by a person who doesn't cares how the computer does a job. These jobs may be specific like, a program that can be used handle mail e.g.:- Outlook Express, and may be specific like a program that can be used as a match making software. In general application programs do not talk to computer directly.</p>

	<p>On the other hand system programming involves writing programs to control the computer; it has to bother about how the computer does a job. They also include providing tools for the application programming. A typical example of the system program is your operating system e.g.:- windows</p>

	<p>Apart from these basic groups of programming different sub classifications like network programming, parallel programming, game programming etc- can also be done, but these all in one way or other fall into the above mentioned categories. We will be looking at some of them in detail in this book.</p>

	<p>This book as the name suggests deals with 'C' programming which is included in both the categories, though used basically for system programming now a days, is the mother of application programming.</p>

	<p><b>PROGRAMMING LANGUAGES</b></p>

	<p>You must be thinking by now that you don't understand French or Spanish but only English, so is the computer so intelligent that it can understand so many programming languages? No, computer cannot understand only a single language of its own which even other computers may not be able to understand. So, how does it all work? To understand this lets have an example. Suppose, you know only English and you went to France, how are you going to understand French? You would hire a translator who would convert French to English directly or convert it to some other language which will be in turn converted to English by some other translator. The language that computer understands is machine language and the person who is programming provides a translator to the computer known as compiler which translates the programming language to machine language and the process of this translation is called as compilation. The process of compilation is so complex that few books can be dedicated to the subject.</p>

	<p>Now, again a question strikes the mind, if I don't have a compiler how will my program be understood? Sorry, your program won't work and for it to work its must to have a compiler and moreover the translated or compiled program may not work on all machine. But one thing we should do is to write the program in a general manner that it is least dependent on the machine language and then transport it to other computers and use compilers specific to that. This is called as portability of the program. Portable programs are also understood to be platform independent. Now, what the hell is platform? Well, you cannot carry a compiler for every computer so you carry a part of compiler that compiles the program into language understood by platforms i.e. your operating system or OS e.g. WINDOWS, LINUX etc- these platforms in turn interacts with your compiler to convert your program to the machine language i.e. platform takes care of the machine language conversion for you. In crude terms OS itself is a very big program to which you're at least your 'C' program talks to get the work done.</p>

	<p>These programming languages are classified broadly into two categories (the common ones),</p>

	<ul>
		<li>Procedure oriented language (POL)</li>
		<li>Object oriented language (OOL)</li>
	</ul>

	<p>In POL we consider a problem as a series of discrete steps. These tell the computer the sequence of instructions (or set of instructions) on base of which the computer completes the task. These languages have very strict rules and grammar. 'C' belongs to this class only. These types of languages are generally used in system programming. On the other hand OOL provides a lot of flexibility and tools. This class of language encourages to visualize the problem as they are in real world. Details or comments on OOL class is beyond the scope of this article. The benefits that accompany OOL are many times compromised on the efficiency of the programs.</p>

	<p>The next question that will boggle your mind is why do we have so many languages? Why won't all computers understand the same language? Why don't we instruct the computer directly in machine language? Well, as every human understands different languages based on the native etc- computer also understands different machine language based on its architecture i.e. how it's made. So, it becomes difficult to learn so many languages. Secondly, computer has a language that's very difficult to understand. Imagine a sequence of 0's and 1's, that's what machine language looks like. Now, as sometimes you use words from different languages to express your emotions properly or sometimes you find the word in other languages easier to use to communicate your emotions, in the same manner different languages are used depending upon the type of task we have. In one language instructing may become very difficult and the same task may become very easy in other language. So, you choose the language based upon the task. Anyways 'C' is a very powerful and versatile language and generally all the tasks can be completed by the tools and programs written in it.</p>

	<p>Before ending this chapter let's see what you are as a programmer? Well, a programmer is the link between a task to be done and its successful realization on the computer. A programmer makes the algorithm to perform a task, chooses the programming language base on the algorithm, converts the algorithm to language specific algorithm and finally writes the program or often called code for completion of the task.</p>

	<p>As a programmer you will be given some task to be done and the output required. You will be responsible to make the algorithm, select the language or may be some language is specified as the only resource as 'C' is taken in this book, write the program, debug it if any errors are there and finally get the task completed on the computer.</p>

	<p>Loaded with the basic terminology and concepts, you are now ready to take a dive into 'C' programming.</p>

	<p><b>BRIEF HISTORY OF C</b></p>

	<p>Okay! I had enough about programming and have already heard a lot about 'C', but who was the person who developed 'C'? Well, an enthusiastic programmer like you called as Dennis Ritchie, who was working in Bell Laboratories in 1972 developed the 'C' programming language basically for UNIX system development. Dennis found many sort comings in the languages he was using at his time, namely 'B' 'BCPL', 'CPL' etc- and devised his own programming language based on those. The language was developed keeping in mind that it servers as both high and low level language. Confused! well low level language is one that computer understands or languages that are close to that and on the other hand high level languages are those which do not bother what language the computer understands and focuses that the user feels the ease of use. So, 'C' serves both the purpose. Soon, we will see how. Well, as you know Latin is a bit difficult to understand and use and is not very general, the same was the condition with 'C' at the time it was developed. And, as English evolved from Latin, the present 'C' evolved from the early 'C'.</p>

	<p>I will also love to tell you about another person named as Ken Thompson who in early 70's created 'B' language which was a scaled down version of 'BPCL'. He becomes significant in the history of 'C' language as Dennis was his co-worker and was working along with him to scale down 'BPCL' and in the way developed 'C'.</p>

	<p>And, finally a great language with capabilities to talk directly with computer and also provide ease of use with very high optimization and a number of features to add was developed.</p>

	<p>Well enough talking of history and all those stuff, let's move to real 'C' programming.</p>

</div>